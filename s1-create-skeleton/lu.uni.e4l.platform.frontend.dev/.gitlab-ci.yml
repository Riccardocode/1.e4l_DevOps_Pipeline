before_script:
  - export CURRENT_DATETIME=`date +"%Y%m%d-%H%M%S"`
stages:
  - build
  - deploy-stage
  - deploy-production


services:
  - name: docker:dind

build:
  rules:
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  image: node:15
  stage: build
  tags: [e4l-frontend]
  script: 
  - npm install
  - npm run build
  - chmod -R 777 e4l.frontend.docker/web/dist
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - e4l.frontend.docker/web/dist
  artifacts:
    paths:
      - e4l.frontend.docker/web/dist
    expire_in: 1 week


deploy-stage:
  stage: deploy-stage
  tags:
    - stage-vm-frontend-shell
  image: ubuntu:latest
  script:
    # Switch to root user to ensure permissions
    # - apt-get update && apt-get install -y openssh-client  # Install SSH client for scp
    # Create a temporary directory within the CI workspace
    - cp -r e4l.frontend.docker/web/dist/* /home/vagrant/deploy-frontend/web/dist
    - /home/vagrant/scripts/deploy-frontend.sh
  dependencies:
    - build  # Ensures artifacts from the build stage are available

deploy-production:
  stage: deploy-production
  tags:
    - production-vm-frontend-shell
  image: ubuntu:latest
  script:
    # Switch to root user to ensure permissions
    # - apt-get update && apt-get install -y openssh-client  # Install SSH client for scp
    # Create a temporary directory within the CI workspace
    - cp -r e4l.frontend.docker/web/dist/* /home/vagrant/deploy-frontend/web/dist
    - /home/vagrant/scripts/deploy-frontend.sh
  dependencies:
    - build  # Ensures artifacts from the build stage are available

